<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gradle | RIAstar]]></title>
  <link href="http://blog.riastar.net/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://blog.riastar.net/"/>
  <updated>2013-05-02T22:43:22+02:00</updated>
  <id>http://blog.riastar.net/</id>
  <author>
    <name><![CDATA[RIAstar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GradleFx: multiple configurations]]></title>
    <link href="http://blog.riastar.net/2013/03/28/gradlefx-multiple-configurations/"/>
    <updated>2013-03-28T22:37:00+01:00</updated>
    <id>http://blog.riastar.net/2013/03/28/gradlefx-multiple-configurations</id>
    <content type="html"><![CDATA[<p>There has been <a href="https://github.com/GradleFx/GradleFx/issues/77">some discussion</a> lately about how we might be able to allow for <a href="https://github.com/GradleFx/GradleFx/issues/80">custom configurations</a> in
<a href="http://gradlefx.org/">GradleFx</a>. Such a custom configuration would allow a user to:</p>

<ul>
<li>generate different outputs from a single code base</li>
<li>use specific dependencies for each of these outputs</li>
<li>hook up any other custom task to a particular configuration</li>
</ul>


<p>As these discussions illustrate it is not currently possible to do so. And though we are looking into some possible
solutions, they may not be implemented soon. So here I am to save the day and provide you with a viable workaround,
until we get the matter sorted out.</p>

<h2>Use case</h2>

<p>This solution is heavily based on mrhaki's <a href="http://mrhaki.blogspot.be/2009/11/gradle-goodness-using-properties-for.html">excellent article</a>, but it is tailored specifically for the Flex
developer that needs to generate multiple outputs for different environments from a single project. I created this when
facing a real-world issue and the solution is being used in production right now, so it's been tried and tested.</p>

<p>The specific situation I was facing was that I needed mock services and embedded mock data, in such a way that the
application could run in standalone mode (i.e. without a server) and give a realistic feel to the users testing the UI.
Of course in the production build I did not want to include all the additional classes and certainly not the embedded
data. So here's how I created a "clean" production output and a heavyweight development output including the mocks.</p>

<h2>A groovy configuration</h2>

<p>Let's start by stubbing out our config file for two different environments.</p>

<p>``` groovy
environments {</p>

<pre><code>dev {
    //development specific stuff goes here
}

production {
    //production specific stuff goes here
}

//all that is shared by both configurations simply stays in the build.gradle file
</code></pre>

<p>}
```</p>

<p>Good, that's how mrhaki described it. Now lets add some properties that we can use in a GradleFx build. Note that I put
all the mock-related code and the resources (the data files) in a separate source tree (<code>src/mock/</code>), which allows me
to easily add/remove that part when needed.</p>

<p>``` groovy
environments {</p>

<pre><code>dev {
    //I added the resources folder to the 'srcDirs' because the files had to be embedded
    srcDirs = ['src/mock/actionscript', 'src/mock/resources']

    //fx-mocks is a library that helps with simulating data from services
    //fx-users-dev is a special build of the fx-users lib that also includes mock services and data
    dependencies.merged = [
        'net.riastar.lib:fx-mocks:1.0-SNAPSHOT',
        'net.riastar.lib:fx-users-dev:1.0-SNAPSHOT'
    ]

    //it's gonna run in standalone mode so we set a bigger default window size
    //mock services are injected, so they're never referenced explicitly;
    //that's why we have to add them through the 'includes' option
    additionalCompilerOptions = [
        "-default-size=1024,600",
        "-includes=" +
            "net.riastar.myapp.service.impl.UserMockService," +
            "net.riastar.myapp.service.impl.MyValueObjectMockService"
    ]
}

production {
    //in production we don't use the mock classes and resources,
    //we don't use the mock library and we use the production build of the fx-users library.
    srcDirs = []
    dependencies.merged = ['com.trasysgroup.lib:fx-users:1.0-SNAPSHOT']
    additionalCompilerOptions = []
}
</code></pre>

<p>}
```</p>

<p>Note that in <code>production</code> I mirrored every property that I declared in the <code>dev</code> block, if only to set its value to an
empty array. This is not strictly nesessary, but it will make the code in the build file a lot more readable later on.</p>

<h2>Use it in a build script</h2>

<p>So we've configured our two environments. Next I will show you how to modify the Gradle(Fx) build script to leverage it.
As in mrhaki's post, this script reads the custom <code>env</code> property from the issued command and processes the config file
accordingly. Hence you'll be able initiate the build of a specific build like so:</p>

<p><code>bash
$ gradle clean build -Penv=production
</code></p>

<p>``` groovy
buildscript {</p>

<pre><code>repositories.mavenCentral()
dependencies.classpath 'org.gradlefx:gradlefx:0.6.4'
</code></pre>

<p>}</p>

<p>apply plugin: 'gradlefx'
type = 'swf'</p>

<p>//'development' build by default if the 'env' argument wasn't set
//I'm not gonna explain this code: read mrhaki's post
def environment = hasProperty('env') ? env : 'development'
ext.config = new ConfigSlurper(environment).parse(file('config.groovy').toURL())</p>

<p>//add our custom srcDirs to the default ones
srcDirs += config.srcDirs</p>

<p>dependencies {</p>

<pre><code>//add our custom libraries; swiftsuspenders will be used both in production and development
merged 'org.swiftsuspenders:swiftsuspenders:2.0.0-rc1',
       config.dependencies.merged

flexSDK 'org.apache:apache-flex-sdk:4.9.1'
</code></pre>

<p>}</p>

<p>//add our custom compiler options
additionalCompilerOptions = config.additionalCompilerOptions
```</p>

<p>See why we declared empty arrays in the <code>production</code> block? It would've required some conditional logic if we hadn't,
leaving the result much less elegant and readable. Especially the <code>merged</code> dependency would've been butt-ugly; believe
me, I tried.</p>

<h2>Conclusion</h2>

<p>Well that's about it. It's not extremely complicated and it's fairly elegant. I know it's not exactly the Gradle way,
but it gets the job done without too many compromises. Hope this helps someone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GradleFx committer]]></title>
    <link href="http://blog.riastar.net/2012/03/08/gradlefx-committer/"/>
    <updated>2012-03-08T00:00:00+01:00</updated>
    <id>http://blog.riastar.net/2012/03/08/gradlefx-committer</id>
    <content type="html"><![CDATA[<p>Today I've taken my first steps in the open-source world: I became a committer to the <a href="http://gradlefx.org/">GradleFx</a> project.</p>

<h2>What project say you?</h2>

<p><a href="http://gradlefx.org/">GradleFx</a> is an automated build tool for building Flex and ActionScript applications. It's a plugin for <a href="http://gradle.org/">Gradle</a>,
which is an alternative to the ubiquitous <a href="http://maven.apache.org/">Maven</a>. Actually calling it an alternative would not be doing it justice:
it's <a href="http://maven.apache.org/">Maven</a>, <a href="http://ant.apache.org/ivy/">Ivy</a> and <a href="http://ant.apache.org/">ANT</a> mixed up and put on <a href="http://groovy.codehaus.org/">steroids</a>.</p>

<p>Until <a href="http://gradlefx.org/">GradleFx</a> came to the scene, us poor Flex developers only had <a href="http://code.google.com/p/flex-mojos/">FlexMojos</a> (a <a href="http://maven.apache.org/">Maven</a> plugin with the
same goal) at their disposal. And truth be said: it has some <em>very</em> annoying bugs. So when I discovered <a href="http://gradlefx.org/">GradleFx</a> I
was delighted.</p>

<p>When I first gave <a href="http://gradlefx.org/">GradleFx</a> a try, I got a few builds up and running in no time. Unfortunately, I soon found out
that <a href="http://gradlefx.org/">GradleFx</a> - being a fairly young project - was missing a few pieces. But since <a href="http://gradle.org/">Gradle</a> was designed to
be an easily extensible framework, I worked my way around those shortcomings with some custom tasks.</p>

<h2>First steps</h2>

<p>I soon discovered that <a href="http://gradlefx.org/">GradleFx</a>' codebase was fairly transparent (as opposed to <a href="http://code.google.com/p/flex-mojos/">FlexMojos</a>'). So I forked the
project on <a href="https://github.com/GradleFx/GradleFx">GitHub</a> and I started adding some minor features. <a href="https://github.com/SlevinBE">Yennick</a>, one of the founders and currently the
only active committer, seemed to like my ideas. He merged them into the codebase rather quickly, encouraged me to keep
on contributing and before I knew what happened, I became part of the 'team'.</p>

<h2>Contributions</h2>

<p>So far I've added only a few minor improvements:</p>

<ul>
<li>a <code>theme</code> dependency scope: well, it was missing</li>
<li>localization conventions: use localized .properties files with zero configuration</li>
<li>the <code>frameworkLinkage</code> convention: a possibility to determine how the Flex framework is linked into the application</li>
</ul>


<p>Coming up:</p>

<ul>
<li>a <code>flashbuilder</code> plugin that generates a FlashBuilder project with all the dependencies on its build path</li>
</ul>

]]></content>
  </entry>
  
</feed>
