<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: open source | RIAstar]]></title>
  <link href="http://blog.riastar.net/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="http://blog.riastar.net/"/>
  <updated>2013-05-02T22:43:22+02:00</updated>
  <id>http://blog.riastar.net/</id>
  <author>
    <name><![CDATA[RIAstar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moving to Octopress and Pagodabox]]></title>
    <link href="http://blog.riastar.net/2013/03/11/octopress-and-pagodabox/"/>
    <updated>2013-03-11T19:00:00+01:00</updated>
    <id>http://blog.riastar.net/2013/03/11/octopress-and-pagodabox</id>
    <content type="html"><![CDATA[<p>It was bound to happen at some point: <strong>I got hacked</strong>. Don't know when, don't know why. I only know that someone broke
into my server, replaced the index page with a nice picture of the Koran and some Engrish proze praising the love of
God. My islamist visitor was kind enough to leave the rest of my content untouched - for all I know, that is.</p>

<h2>Now how could this happen?</h2>

<p>Well, since I can find the time to write on this blog - say - once a year, how often do you think I applied security
updates to my WordPress blog?</p>

<p>Right!</p>

<p><img class="right" src="/images/posts/2013/octopress.png" title="OctoPress logo" ></p>

<p>So, because a Wordpress engine was overkill for my requirements anyway, not to mention slooooooow, I went CMS hunting
and found the perfect solution with <a href="http://octopress.org/">OctoPress</a>. This is a perfectly geeky CMS that generates static html pages.
You write your posts in <a href="http://daringfireball.net/projects/markdown/">MarkDown</a> - oh yeah, pure text, no WYSIWYG involved; then you  execute the <code>generate</code>
command on the command line; your site is generated and ready to deploy.</p>

<p>Its main advantages over my previous situation:</p>

<ul>
<li>I love the geekyness of the whole concept</li>
<li>It's blazing fast: no database queries, no script processing, no nothing</li>
<li>It's way more secure: try injecting this, m*th*f*ck*r</li>
<li>It generates perfect semantic markup</li>
<li>So far it's been fairly easy to customize</li>
</ul>


<p>Main downside at this point:</p>

<ul>
<li>I had a pretty hard time getting it to run on my Windows box: it's written in Ruby which doesn't like Windows very
much. And I had no luck at all installing it under <a href="http://www.cygwin.com/">Cygwin</a>, so for the time being I'm stuck in a DOS shell to
issue my commands.</li>
</ul>


<h2>New server</h2>

<p>By chance I came across <a href="https://pagodabox.com/">PagodaBox</a> just about the same day. It is to Php what <a href="http://www.heroku.com/">Heroku</a> is to Ruby: a scalable
hosting service in the cloud. Fortunately they had a free offering that - though limited - allowed me to play
around. And I really love it, mostly for its Git deployment interface.</p>

<p>The result is that I ended up with a workflow to write a new post and deploy it to my <a href="https://pagodabox.com/">PagodaBox</a> instance, that
goes like this:</p>

<p><code>sh
$ vim 2013-03-11-my-new-post.md
$ rake generate
$ git add .
$ git commit -m 'created new blog post'
$ git push
</code></p>

<p>Just lovely!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GradleFx committer]]></title>
    <link href="http://blog.riastar.net/2012/03/08/gradlefx-committer/"/>
    <updated>2012-03-08T00:00:00+01:00</updated>
    <id>http://blog.riastar.net/2012/03/08/gradlefx-committer</id>
    <content type="html"><![CDATA[<p>Today I've taken my first steps in the open-source world: I became a committer to the <a href="http://gradlefx.org/">GradleFx</a> project.</p>

<h2>What project say you?</h2>

<p><a href="http://gradlefx.org/">GradleFx</a> is an automated build tool for building Flex and ActionScript applications. It's a plugin for <a href="http://gradle.org/">Gradle</a>,
which is an alternative to the ubiquitous <a href="http://maven.apache.org/">Maven</a>. Actually calling it an alternative would not be doing it justice:
it's <a href="http://maven.apache.org/">Maven</a>, <a href="http://ant.apache.org/ivy/">Ivy</a> and <a href="http://ant.apache.org/">ANT</a> mixed up and put on <a href="http://groovy.codehaus.org/">steroids</a>.</p>

<p>Until <a href="http://gradlefx.org/">GradleFx</a> came to the scene, us poor Flex developers only had <a href="http://code.google.com/p/flex-mojos/">FlexMojos</a> (a <a href="http://maven.apache.org/">Maven</a> plugin with the
same goal) at their disposal. And truth be said: it has some <em>very</em> annoying bugs. So when I discovered <a href="http://gradlefx.org/">GradleFx</a> I
was delighted.</p>

<p>When I first gave <a href="http://gradlefx.org/">GradleFx</a> a try, I got a few builds up and running in no time. Unfortunately, I soon found out
that <a href="http://gradlefx.org/">GradleFx</a> - being a fairly young project - was missing a few pieces. But since <a href="http://gradle.org/">Gradle</a> was designed to
be an easily extensible framework, I worked my way around those shortcomings with some custom tasks.</p>

<h2>First steps</h2>

<p>I soon discovered that <a href="http://gradlefx.org/">GradleFx</a>' codebase was fairly transparent (as opposed to <a href="http://code.google.com/p/flex-mojos/">FlexMojos</a>'). So I forked the
project on <a href="https://github.com/GradleFx/GradleFx">GitHub</a> and I started adding some minor features. <a href="https://github.com/SlevinBE">Yennick</a>, one of the founders and currently the
only active committer, seemed to like my ideas. He merged them into the codebase rather quickly, encouraged me to keep
on contributing and before I knew what happened, I became part of the 'team'.</p>

<h2>Contributions</h2>

<p>So far I've added only a few minor improvements:</p>

<ul>
<li>a <code>theme</code> dependency scope: well, it was missing</li>
<li>localization conventions: use localized .properties files with zero configuration</li>
<li>the <code>frameworkLinkage</code> convention: a possibility to determine how the Flex framework is linked into the application</li>
</ul>


<p>Coming up:</p>

<ul>
<li>a <code>flashbuilder</code> plugin that generates a FlashBuilder project with all the dependencies on its build path</li>
</ul>

]]></content>
  </entry>
  
</feed>
